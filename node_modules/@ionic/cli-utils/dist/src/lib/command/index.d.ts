import * as superagent from 'superagent';
import { APIResponse, CommandData, IonicEnvironment, CommandLineInputs, CommandLineOptions, ICommand, ValidationError } from '../../definitions';
import { FatalException } from '../errors';
export declare function CommandMetadata(metadata: CommandData): (target: Function) => void;
export declare class Command implements ICommand {
    env: IonicEnvironment;
    metadata: CommandData;
    load(): Promise<void>;
    unload(): Promise<void>;
    prerun(inputs: CommandLineInputs, options: CommandLineOptions): Promise<void | number>;
    run(inputs: CommandLineInputs, options: CommandLineOptions, validationErrors: ValidationError[]): Promise<void | number>;
    execute(inputs?: CommandLineInputs): Promise<void>;
    exit(msg: string, code?: number): FatalException;
    exitAPIFormat(req: superagent.SuperAgentRequest, res: APIResponse): FatalException;
    getCleanInputsForTelemetry(inputs: CommandLineInputs, options: CommandLineOptions): string[];
}
